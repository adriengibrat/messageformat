import {lookup} from 'cldr/plural/utils'

const messageformat = require('../messageformat.js')
const plurals = { plural: require('../plurals.js'), ordinal: require('../ordinals.js') }
const currencies = require('../currencies.js')
const stdin = process.stdin
const option = arg => (/^--(\S+)$/.exec(arg) || []).pop()
const args = process.argv.slice(2)
const options = Object.assign({ locale: 'en' }, args
	.reduce((options, argument, index) => {
		const key = option(argument)
		const next = args[index + 1]
		if (key)
			options[key] = null == next || option(next) ? true : next
		return options
	}, {}))
let input = ''

stdin.setEncoding('utf8')
stdin.on('data', chunk =>  { input += chunk })
stdin.on('end', function () {
	let messages
	try { // parse input
		messages = JSON.parse(input)
	}
	catch (error) {
		// eslint-disable-next-line no-console
		return console.error('messages must be valid JSON', error.message)
	}
	// Options:
	// currency, debug, date, list, locale, name, number, ordinal, plural, time

	Array('date', 'number', 'time').forEach(option => {
		if (options.hasOwnProperty(option))
			options[option] = JSON.parse(options[option])
	})
	Array('plural', 'ordinal').forEach(option => {
		options[option] = options.hasOwnProperty(option) ?
			require(options[option])
			: lookup(plurals[option], options.locale)
	})

	Array('currency').forEach(function (option) {
		if (!options.hasOwnProperty(option))
			options[option] = currencies(options.locale)
	})

	const i18n = messageformat(messages, options)
	const name = options.name || 'i18n'
	// eslint-disable-next-line no-console
	console.log(`var ${name} = ${clean(i18n)};`)

console.log(`
console.log(${name}().party({
	gender_of_host: 'male'
	, host: 'LÃ©o'
	, guest: 'Mia'
	, num_guests: 12
	, date: new Date()
	, price: 2
}))`)

})

if (stdin.isTTY) { // outputs source when no stdin
	'aa'
	process.exit()
}

// Source format helpers
function clean (source) { // cleanup source code generated by new Function
	return String(source)
		.replace(/(\bfunction )(anonymous)?/g, '$1')
		.replace(/\s*\/\*\*\//g, '')
}
