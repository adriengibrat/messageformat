#!/usr/bin/env node
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fs = _interopDefault(require('fs'));
var path = _interopDefault(require('path'));

/**
 * messageformat 0.0.1 – i18n message formating, all inclusive
 * Made with ♫·♪ & -♥- by Adrien Gibrat <adrien.gibrat@gmail.com>
 * Published under (WTFPL OR MIT) License
 */

// pick keys in given object
function pick (keys, object) { 
	return Object.keys(object)
		.filter(function (key) { return -1 !== keys.indexOf(key) })
		.reduce(function (pick, key) { return pick[key] = object[key], pick }, {})
}

// KISS helper
function identity (a) { return a }

// parse locale
function parseLocale (value) {
	var ref = /^([a-z]{2,3})(?:[-_]([A-Z][a-z]{3}))?(?:[-_]([A-Z]{2}|[0-9]{3}))?$/.exec(value) || [value];
	var locale = ref[0];
	var language = ref[1];
	var script = ref[2];
	var region = ref[3];
	return {locale: locale, language: language, script: script, region: region}
}

// lookup locale data in dictionary hash
function lookup (dictionary, key) {
	var ref = parseLocale(key);
	var locale = ref.locale;
	var language = ref.language;
	var script = ref.script;
	var region = ref.region;
	return dictionary[locale] || dictionary[(language + "-" + region)] || dictionary[(language + "-" + script)] || dictionary[language] || dictionary[region]
}

// cleanup source code generated by new Function
function clean (source) {
	return String(source)
		.replace(/(\bfunction )(anonymous)?/g, '$1')
		.replace(/\s*\/\*\*\//g, '')
}

// small UMD loader
var loader = function (root, name, factory) {
	/* global define: false, exports: false, module: false */
	if ('function' === typeof define && define.amd)
		define(name, factory())
	else if ('object' === typeof exports)
		module.exports = factory()
	else
		root[name] = factory()
}

// format source with UMD loader
function umd (name, factory) {
	return clean(("(" + loader + ")(this, \"" + name + "\", " + factory + ");"))
}

var args = process.argv.slice(2)
var subset = args.length ? pick.bind(null, args) : identity
var directory = path.resolve('node_modules/cldr-misc-modern/main/')
var lists = fs.readdirSync(directory)
	.reduce(function (lists, locale) {
		lists[locale] = JSON.parse(fs.readFileSync((directory + "/" + locale + "/listPatterns.json"), 'utf8'))
				.main[locale].listPatterns['listPattern-type-standard']
		return lists
	}, {})

lists = Object.keys(lists)
	.reduce(function (cleaned, locale) {
		var list = lists[locale]
		if (list[2] === list.end)
			delete list[2]
		if (list.start === list.middle)
			delete list.middle
		list = JSON.stringify(list)
		if (!cleaned[list])
			cleaned[list] = []
		cleaned[list].push(locale)
		return cleaned
	}, {})

Object.keys(lists)
	.forEach(function (key) { return lists[key] = lists[key]
			.reduce(function (shortlist, locale, index, locales) {
				var language = locale.split('-').shift()
				locale = -1 !== locales.indexOf(language) ? language : locale
				return -1 !== shortlist.indexOf(locale) ? shortlist : shortlist.concat(locale)
			}, []); }
	)

lists  = Object.keys(lists)
	.reduce(function (data, key) {
		lists[key].forEach(function (locale) { return data[locale] = JSON.parse(key); })
		return data
	}, {})

// eslint-disable-next-line no-console
console.log(umd('list', "function () {"
	+ "var lists = " + (JSON.stringify(subset(lists))) + ";"
	+ parseLocale + ";"
	+ lookup + ";"
	+ "return function (locale) {"
	+	"return lookup(lists, locale)"
	+ "} }"
))