#!/usr/bin/env node
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var currencies = _interopDefault(require('cldr-core/supplemental/currencyData.json'));

/**
 * messageformat 0.0.1 – i18n message formating, all inclusive
 * Made with ♫·♪ & -♥- by Adrien Gibrat <adrien.gibrat@gmail.com>
 * Published under (WTFPL OR MIT) License
 */

function parse (data, historical) {
	return Object.keys(data)
		.reduce(function (map, region) {
			var history = {}
			var currencies = data[region]
				.reduce(function (local, currencies) { return local.concat(
						Object.keys(currencies)
							.reduce(function (list, name) {
								var currency = currencies[name]
								history[name] = currency._from
								return !historical && (!currency._from || currency._to) ?
									list
									: list.concat(name)
							}, [])
					); }
				, [])
			if (currencies.length)
				map[region] = currencies.sort(function (a, b) { return history[a] > history[b] ? history[a] ? -1 : 0 : 1; })
			return map
		}, {})
}

// pick keys in given object
function pick (keys, object) { 
	return Object.keys(object)
		.filter(function (key) { return -1 !== keys.indexOf(key) })
		.reduce(function (pick, key) { return pick[key] = object[key], pick }, {})
}

// KISS helper
function identity (a) { return a }

// parse locale
function parseLocale (value) {
	var ref = /^([a-z]{2,3})(?:[-_]([A-Z][a-z]{3}))?(?:[-_]([A-Z]{2}|[0-9]{3}))?$/.exec(value) || [value];
	var locale = ref[0];
	var language = ref[1];
	var script = ref[2];
	var region = ref[3];
	return {locale: locale, language: language, script: script, region: region}
}

// cleanup source code generated by new Function
function clean (source) {
	return String(source)
		.replace(/(\bfunction )(anonymous)?/g, '$1')
		.replace(/\s*\/\*\*\//g, '')
}

// small UMD loader
var loader = function (root, name, factory) {
	/* global define: false, exports: false, module: false */
	if ('function' === typeof define && define.amd)
		define(name, factory())
	else if ('object' === typeof exports)
		module.exports = factory()
	else
		root[name] = factory()
}

// format source with UMD loader
function umd (name, factory) {
	return clean(("(" + loader + ")(this, \"" + name + "\", " + factory + ");"))
}

var args = process.argv.slice(2)
var data = parse(currencies.supplemental.currencyData.region)
var subset = args.length ? pick.bind(null, args) : identity

// eslint-disable-next-line no-console
console.log(umd('currency', "function () {"
	+ "var currencies = " + (JSON.stringify(subset(data))) + ";"
	+ parseLocale + ";"
	+ "return function (locale) {"
	+	"return (currencies[parseLocale(locale).region] || currencies[locale.toUpperCase()] || [])[0]"
	+ "} }"
))