#!/usr/bin/env node
'use strict';

/**
 * messageformat 0.0.1 – i18n message formating, all inclusive
 * Made with ♫·♪ & -♥- by Adrien Gibrat <adrien.gibrat@gmail.com>
 * Published under (WTFPL OR MIT) License
 */

// parse locale
function parseLocale (value) {
	var ref = /^([a-z]{2,3})(?:[-_]([A-Z][a-z]{3}))?(?:[-_]([A-Z]{2}|[0-9]{3}))?$/.exec(value) || [value];
	var locale = ref[0];
	var language = ref[1];
	var script = ref[2];
	var region = ref[3];
	return {locale: locale, language: language, script: script, region: region}
}

// lookup locale data in dictionary hash
function lookup (dictionary, key) {
	var ref = parseLocale(key);
	var locale = ref.locale;
	var language = ref.language;
	var script = ref.script;
	var region = ref.region;
	return dictionary[locale] || dictionary[(language + "-" + region)] || dictionary[(language + "-" + script)] || dictionary[language] || dictionary[region]
}

var messageformat = require('../messageformat.js')
var plurals = { plural: require('../plurals.js'), ordinal: require('../ordinals.js') }
var currencies = require('../currencies.js')
var stdin = process.stdin
var option = function (arg) { return (/^--(\S+)$/.exec(arg) || []).pop(); }
var args = process.argv.slice(2)
var options = Object.assign({ locale: 'en' }, args
	.reduce(function (options, argument, index) {
		var key = option(argument)
		var next = args[index + 1]
		if (key)
			options[key] = null == next || option(next) ? true : next
		return options
	}, {}))
var input = ''

stdin.setEncoding('utf8')
stdin.on('data', function (chunk) { input += chunk })
stdin.on('end', function () {
	var messages
	try { // parse input
		messages = JSON.parse(input)
	}
	catch (error) {
		// eslint-disable-next-line no-console
		return console.error('messages must be valid JSON', error.message)
	}
	// Options:
	// currency, debug, date, list, locale, name, number, ordinal, plural, time

	Array('date', 'number', 'time').forEach(function (option) {
		if (options.hasOwnProperty(option))
			options[option] = JSON.parse(options[option])
	})
	Array('plural', 'ordinal').forEach(function (option) {
		options[option] = options.hasOwnProperty(option) ?
			require(options[option])
			: lookup(plurals[option], options.locale)
	})

	Array('currency').forEach(function (option) {
		if (!options.hasOwnProperty(option))
			options[option] = currencies(options.locale)
	})

	var i18n = messageformat(messages, options)
	var name = options.name || 'i18n'
	// eslint-disable-next-line no-console
	console.log(("var " + name + " = " + (clean(i18n)) + ";"))

console.log(("\nconsole.log(" + name + "().party({\n\tgender_of_host: 'male'\n\t, host: 'Léo'\n\t, guest: 'Mia'\n\t, num_guests: 12\n\t, date: new Date()\n\t, price: 2\n}))"))

})

if (stdin.isTTY) { // outputs source when no stdin
	'aa'
	process.exit()
}

// Source format helpers
function clean (source) { // cleanup source code generated by new Function
	return String(source)
		.replace(/(\bfunction )(anonymous)?/g, '$1')
		.replace(/\s*\/\*\*\//g, '')
}