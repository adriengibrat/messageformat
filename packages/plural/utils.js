// map object, optionally by given order
export function map (mapper, object, order) {
	return Object.keys(object)
		.sort(order || (() => 0))
		.map(key => mapper(object[key], key))
}

// reduce object, fp style
export function reduce (reducer, initial, object) {
	return Object.keys(object).reduce((acc, key) => reducer(acc, object[key], key), initial)
}

// pick keys in given object
// export function pick (keys, object) { 
// 	return Object.keys(object)
// 		.filter(function (key) { return -1 !== keys.indexOf(key) })
// 		.reduce(function (pick, key) { return pick[key] = object[key], pick }, {})
// }

// create object comparator to sort by prop, according given order hash
export function by (prop, order) {
	return (a, b) => order[a[prop]] < order[b[prop]] ? -1 : 1
}

// generate variable names: 'a', 'b', ..., 'z', 'a1', 'b2', etc.
export function variable (index) {
	return String.fromCharCode(index % 26 + 97)+ (index / 26 | 0 || '')
}

// KISS helper
export function identity (a) { return a }

// DRY helper
export function prop (key) { return object => object[key] }

// parse locale
export function parseLocale (value) {
	const [locale, language, script, region] = /^([a-z]{2,3})(?:[-_]([A-Z][a-z]{3}))?(?:[-_]([A-Z]{2}|[0-9]{3}))?$/.exec(value) || [value]
	return {locale, language, script, region}
}

export function parseArgs (args) {
	const option = arg => (/^--(\S+)$/.exec(arg) || []).pop()
	return args
		.reduce((options, argument, index) => {
			const key = option(argument)
			const next = args[index + 1]
			if (key)
				options[key] = null == next || option(next) ? true : next
			return options
		}, {})
}

// cleanup source code generated by new Function
export function clean (source) {
	return String(source)
		.replace(/(\bfunction )(anonymous)?/g, '$1')
		.replace(/\s*\/\*\*\//g, '')
}

// format source with UMD loader
export function umd (name, factory) {
	// small UMD loader
	const loader = function (root, name, factory) {
		/* global define: false, exports: false, module: false */
		if ('function' === typeof define && define.amd)
			define(name, factory())
		else if ('object' === typeof exports)
			module.exports = factory()
		else
			root[name] = factory()
	}
	return `(${loader})(this, "${name}", ${factory});`
}
